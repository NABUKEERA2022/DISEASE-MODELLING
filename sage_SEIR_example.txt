#SEIR model

var('mu, gamma, Lambda, beta, rho, S, E, I, R')

N = S + E + I + R

eqn1 = Lambda - beta*S*I/N - mu*S
eqn2 = beta*S*I/N - mu*E - rho*E
eqn3 = rho*E - mu*I - gamma*I
eqn4 = gamma*I - mu*R

soln = solve([eqn1==0, eqn2==0, eqn3==0, eqn4==0], S, E, I, R) ; show(soln)

f = matrix(SR, 2, 1, [beta*S*I/N, 0]) ; show(f)
v = matrix(SR, 2, 1, [mu*E+ rho*E , -rho*E + gamma*I + mu*I]) ; show(v)

F=jacobian(f, (E,I))
F_dfe=F(S=Lambda/mu, E=0, I=0, R=0)
V=jacobian(v, (E,I))
V_dfe=V(S=Lambda/mu, E=0, I=0, R=0)

V_dfe_inv = V_dfe.inverse() ; show(V_dfe_inv)

FV_1 = F_dfe*V_dfe_inv

evalues = FV_1.eigenvalues()

show(evalues)


